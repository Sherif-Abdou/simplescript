extern def log(x: f64): f64
extern def putchar(x: char): i64
extern def gets(buffer: &char): &char
extern def malloc(size: i64): &char
extern def realloc(ptr: &char, size: i64): &char
extern def puts(str: &char): i64
extern def free(ptr: &char)

struct String {
    internal: &char,
    capacity: i64,
    len: i64
}

def make_string(capacity: i64): String {
    s = String()
    s.capacity = capacity
    s.len = 0
    s.internal = malloc(capacity)

    return s
}

def string_append_char(s: &String, c: char): i64 {
    if s->len > s->capacity {
        s->capacity = s->capacity * 2
        s->internal = realloc(s->internal, s->capacity)
    }
    s->internal[s->len] = c
    s->len = s->len + 1
    return 0
}

def free_string(str: &String): i64 {
    free(s->internal)
    return 0
}

def main(): i64 {
    s = make_string(1)
    
    string_append_char(&s, 'h')
    putchar(s.capacity + 48)
    string_append_char(&s, 'e')
    putchar(s.capacity + 48)
    string_append_char(&s, 'l')
    putchar(s.capacity + 48)
    string_append_char(&s, 'l')
    putchar(s.capacity + 48)
    string_append_char(&s, '\0')
    putchar('\n')
    return 0
}
